# Generated by Django 2.1.4 on 2019-01-02 17:17

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import portal.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LandsatSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_watertype', models.CharField(choices=[('4', '4'), ('42', '42'), ('82', '82')], default='4', help_text='Original water type to be used for retrieval of water constituents', max_length=50)),
                ('coupled_wsr', models.BooleanField(default=True, help_text='Retrieve atmosphere and water constituents together.')),
                ('use_slopy', models.BooleanField(default=False, help_text='Use aerosol-slope retrieval program instead of fixed global aerosol slope. Can not be used with coupled water_species_retrieval.')),
                ('watertype_mixing', models.BooleanField(default=True, help_text='Use automatic retrieval of watertype instead of a fixed water type.')),
                ('use_imagepart', models.BooleanField(default=True, help_text='Process only a portion of the full scene (set path to Imgpart Shape)')),
                ('mask_with_shape', models.BooleanField(default=False, help_text='Mask out regions that shall not be processed (set path to MASK_IMG_SHAPE). This is different to USE_IMAGEPART, because there is no clipping involved.')),
                ('clip_aoi', models.BooleanField(default=False, help_text='Clip AOI at the end (set path to CLIPAOI_SHAPE).')),
                ('polygonstatistics', models.BooleanField(default=True, help_text='Calculate basic statistics within a pre-defined polygon shapefile (set path to POLYGONSTATISTICS_SHAPE and adjust PRODUCTLIST_POLYSTATS).')),
                ('calculate_rrs', models.BooleanField(default=True, help_text='Calculate Reflectance products.')),
                ('calculate_sst', models.BooleanField(default=True, help_text='Calculate water surface temperature.')),
                ('calculate_evaporation', models.BooleanField(default=True, help_text='Calculate evaporation rate based on SST.')),
                ('project_name', models.CharField(blank=True, help_text='Detailed description', max_length=200)),
                ('create_gmask', models.BooleanField(default=True, help_text='Creation an initial land-water-mask on the fly based on Landsat archive (not the actual scene!).')),
                ('minimum_water_percentage', models.IntegerField(default=10, help_text='Compares the land-water-mask derived from the actual scene with the initial land-water-mask and declares the actual image as empty, if the detected water area is below the given threshold value compared to the gmask. Set to 0 if this shall not be used!', validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('scaled_workflow', models.BooleanField(default=False, help_text='Run the whole processing chain at 90m resolution.')),
                ('pan_sharpening', models.BooleanField(default=False, help_text='Processs at 15m resolution using pan-sharpening.')),
                ('gleasy', models.BooleanField(default=True, help_text='Run glint correction.')),
                ('use_static_mask_shape', models.BooleanField(default=False, help_text='Use pre-defined static shapes for product masking (e.g. shallow water areas; set path to STATIC_MASK_SHAPE).')),
            ],
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='RrsConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor', models.CharField(max_length=100)),
                ('slug', models.SlugField(unique=True)),
                ('geodata_model', models.CharField(choices=[('Landsat8', 'Landsat8'), ('Sentinel2', 'Sentinel2'), ('Sentinel3', 'Sentinel3')], max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='SentinelSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_watertype', models.CharField(choices=[('4', '4'), ('42', '42'), ('82', '82')], default='4', help_text='Original water type to be used for retrieval of water constituents', max_length=50)),
                ('coupled_wsr', models.BooleanField(default=True, help_text='Retrieve atmosphere and water constituents together.')),
                ('use_slopy', models.BooleanField(default=False, help_text='Use aerosol-slope retrieval program instead of fixed global aerosol slope. Can not be used with coupled water_species_retrieval.')),
                ('watertype_mixing', models.BooleanField(default=True, help_text='Use automatic retrieval of watertype instead of a fixed water type.')),
                ('use_imagepart', models.BooleanField(default=True, help_text='Process only a portion of the full scene (set path to Imgpart Shape)')),
                ('mask_with_shape', models.BooleanField(default=False, help_text='Mask out regions that shall not be processed (set path to MASK_IMG_SHAPE). This is different to USE_IMAGEPART, because there is no clipping involved.')),
                ('clip_aoi', models.BooleanField(default=False, help_text='Clip AOI at the end (set path to CLIPAOI_SHAPE).')),
                ('polygonstatistics', models.BooleanField(default=True, help_text='Calculate basic statistics within a pre-defined polygon shapefile (set path to POLYGONSTATISTICS_SHAPE and adjust PRODUCTLIST_POLYSTATS).')),
                ('calculate_rrs', models.BooleanField(default=True, help_text='Calculate Reflectance products.')),
                ('calculate_sst', models.BooleanField(default=True, help_text='Calculate water surface temperature.')),
                ('calculate_evaporation', models.BooleanField(default=True, help_text='Calculate evaporation rate based on SST.')),
                ('project_name', models.CharField(blank=True, help_text='Detailed description', max_length=200)),
                ('create_gmask', models.BooleanField(default=True, help_text='Creation an initial land-water-mask on the fly based on Landsat archive (not the actual scene!).')),
                ('minimum_water_percentage', models.IntegerField(default=10, help_text='Compares the land-water-mask derived from the actual scene with the initial land-water-mask and declares the actual image as empty, if the detected water area is below the given threshold value compared to the gmask. Set to 0 if this shall not be used!', validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('scaled_workflow', models.BooleanField(default=False, help_text='Run the whole processing chain at 90m resolution.')),
                ('pan_sharpening', models.BooleanField(default=False, help_text='Processs at 15m resolution using pan-sharpening.')),
                ('gleasy', models.BooleanField(default=True, help_text='Run glint correction.')),
                ('use_static_mask_shape', models.BooleanField(default=False, help_text='Use pre-defined static shapes for product masking (e.g. shallow water areas; set path to STATIC_MASK_SHAPE).')),
                ('product_list', models.ManyToManyField(default=portal.models.all_products, help_text='Product list for processing and for which polygon statistics shall be calculated.', to='portal.Products')),
                ('rrs_config', models.ManyToManyField(default=portal.models.all_rrs_config, help_text='Specification of RRS calculation', to='portal.RrsConfig')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.Sensor')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='landsatsetting',
            name='product_list',
            field=models.ManyToManyField(default=portal.models.all_products, help_text='Product list for processing and for which polygon statistics shall be calculated.', to='portal.Products'),
        ),
        migrations.AddField(
            model_name='landsatsetting',
            name='rrs_config',
            field=models.ManyToManyField(default=portal.models.all_rrs_config, help_text='Specification of RRS calculation', to='portal.RrsConfig'),
        ),
        migrations.AddField(
            model_name='landsatsetting',
            name='sensor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.Sensor'),
        ),
        migrations.AddField(
            model_name='landsatsetting',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
