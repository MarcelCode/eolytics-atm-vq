# Generated by Django 2.1.4 on 2019-01-25 14:55

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projects', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConfigLandsat8',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ews_ident', models.CharField(blank=True, max_length=255, null=True)),
                ('config_name', models.CharField(default='Default', max_length=200, unique=True)),
                ('default_config', models.BooleanField(default=False)),
                ('product_AOT', models.BooleanField(default=True, verbose_name='AOT')),
                ('product_TUR', models.BooleanField(default=True, verbose_name='TUR')),
                ('product_CHL', models.BooleanField(default=True, verbose_name='CHL')),
                ('product_HAB', models.BooleanField(default=True, verbose_name='HAB')),
                ('product_Z90', models.BooleanField(default=True, verbose_name='Z90')),
                ('product_SDD', models.BooleanField(default=True, verbose_name='SDD')),
                ('product_QUT', models.BooleanField(default=True, verbose_name='QUT')),
                ('product_SST', models.BooleanField(default=True, verbose_name='SST')),
                ('product_EVA', models.BooleanField(default=True, verbose_name='EVA')),
                ('main_watertype', models.IntegerField(default=4, help_text='Original water type to be used for retrieval of water constituents')),
                ('coupled_wsr', models.BooleanField(default=True, help_text='Retrieve atmosphere and water constituents together.')),
                ('use_slopy', models.BooleanField(default=False, help_text='Use aerosol-slope retrieval program instead of fixed global aerosol slope. Can not be used with coupled water_species_retrieval.')),
                ('watertype_mixing', models.BooleanField(default=True, help_text='Use automatic retrieval of watertype instead of a fixed water type.')),
                ('use_imagepart', models.BooleanField(default=True, help_text='Process only a portion of the full scene (set path to Imgpart Shape)')),
                ('mask_with_shape', models.BooleanField(default=False, help_text='Mask out regions that shall not be processed (set path to MASK_IMG_SHAPE). This is different to USE_IMAGEPART, because there is no clipping involved.')),
                ('clip_aoi', models.BooleanField(default=False, help_text='Clip AOI at the end (set path to CLIPAOI_SHAPE).')),
                ('polygonstatistics', models.BooleanField(default=True, help_text='Calculate basic statistics within a pre-defined polygon shapefile (set path to POLYGONSTATISTICS_SHAPE and adjust PRODUCTLIST_POLYSTATS).')),
                ('calculate_rrs', models.BooleanField(default=True, help_text='Calculate Reflectance products.')),
                ('rrs_RRS', models.BooleanField(default=True, verbose_name='RRS')),
                ('rrs_RRA', models.BooleanField(default=True, verbose_name='RRA')),
                ('rrs_RRW', models.BooleanField(default=True, verbose_name='RRW')),
                ('rrs_SSR', models.BooleanField(default=True, verbose_name='SSR')),
                ('calculate_sst', models.BooleanField(default=True, help_text='Calculate water surface temperature.')),
                ('calculate_evaporation', models.BooleanField(default=True, help_text='Calculate evaporation rate based on SST.')),
                ('project_name', models.CharField(blank=True, help_text='Detailed description', max_length=200)),
                ('create_gmask', models.BooleanField(default=True, help_text='Creation an initial land-water-mask on the fly based on Landsat archive (not the actual scene!).')),
                ('minimum_water_percentage', models.IntegerField(default=10, help_text='Compares the land-water-mask derived from the actual scene with the initial land-water-mask and declares the actual image as empty, if the detected water area is below the given threshold value compared to the gmask. Set to 0 if this shall not be used!', validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('scaled_workflow', models.BooleanField(default=False, help_text='Run the whole processing chain at 90m resolution.')),
                ('pan_sharpening', models.BooleanField(default=False, help_text='Processs at 15m resolution using pan-sharpening.')),
                ('gleasy', models.BooleanField(default=True, help_text='Run glint correction.')),
                ('use_static_mask_shape', models.BooleanField(default=False, help_text='Use pre-defined static shapes for product masking (e.g. shallow water areas; set path to STATIC_MASK_SHAPE).')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.UserProject')),
            ],
        ),
        migrations.CreateModel(
            name='ConfigSentinel2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ews_ident', models.CharField(blank=True, max_length=255, null=True)),
                ('config_name', models.CharField(default='Default', max_length=200, unique=True)),
                ('default_config', models.BooleanField(default=False)),
                ('product_AOT', models.BooleanField(default=True, verbose_name='AOT')),
                ('product_TUR', models.BooleanField(default=True, verbose_name='TUR')),
                ('product_CHL', models.BooleanField(default=True, verbose_name='CHL')),
                ('product_HAB', models.BooleanField(default=True, verbose_name='HAB')),
                ('product_Z90', models.BooleanField(default=True, verbose_name='Z90')),
                ('product_SDD', models.BooleanField(default=True, verbose_name='SDD')),
                ('product_QUT', models.BooleanField(default=True, verbose_name='QUT')),
                ('product_SST', models.BooleanField(default=True, verbose_name='SST')),
                ('product_EVA', models.BooleanField(default=True, verbose_name='EVA')),
                ('main_watertype', models.IntegerField(default=4, help_text='Original water type to be used for retrieval of water constituents')),
                ('coupled_wsr', models.BooleanField(default=True, help_text='Retrieve atmosphere and water constituents together.')),
                ('use_slopy', models.BooleanField(default=False, help_text='Use aerosol-slope retrieval program instead of fixed global aerosol slope. Can not be used with coupled water_species_retrieval.')),
                ('watertype_mixing', models.BooleanField(default=True, help_text='Use automatic retrieval of watertype instead of a fixed water type.')),
                ('use_imagepart', models.BooleanField(default=True, help_text='Process only a portion of the full scene (set path to Imgpart Shape)')),
                ('mask_with_shape', models.BooleanField(default=False, help_text='Mask out regions that shall not be processed (set path to MASK_IMG_SHAPE). This is different to USE_IMAGEPART, because there is no clipping involved.')),
                ('clip_aoi', models.BooleanField(default=False, help_text='Clip AOI at the end (set path to CLIPAOI_SHAPE).')),
                ('polygonstatistics', models.BooleanField(default=True, help_text='Calculate basic statistics within a pre-defined polygon shapefile (set path to POLYGONSTATISTICS_SHAPE and adjust PRODUCTLIST_POLYSTATS).')),
                ('calculate_rrs', models.BooleanField(default=True, help_text='Calculate Reflectance products.')),
                ('rrs_RRS', models.BooleanField(default=True, verbose_name='RRS')),
                ('rrs_RRA', models.BooleanField(default=True, verbose_name='RRA')),
                ('rrs_RRW', models.BooleanField(default=True, verbose_name='RRW')),
                ('rrs_SSR', models.BooleanField(default=True, verbose_name='SSR')),
                ('calculate_sst', models.BooleanField(default=True, help_text='Calculate water surface temperature.')),
                ('calculate_evaporation', models.BooleanField(default=True, help_text='Calculate evaporation rate based on SST.')),
                ('project_name', models.CharField(blank=True, help_text='Detailed description', max_length=200)),
                ('create_gmask', models.BooleanField(default=True, help_text='Creation an initial land-water-mask on the fly based on Landsat archive (not the actual scene!).')),
                ('minimum_water_percentage', models.IntegerField(default=10, help_text='Compares the land-water-mask derived from the actual scene with the initial land-water-mask and declares the actual image as empty, if the detected water area is below the given threshold value compared to the gmask. Set to 0 if this shall not be used!', validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('scaled_workflow', models.BooleanField(default=False, help_text='Run the whole processing chain at 90m resolution.')),
                ('pan_sharpening', models.BooleanField(default=False, help_text='Processs at 15m resolution using pan-sharpening.')),
                ('gleasy', models.BooleanField(default=True, help_text='Run glint correction.')),
                ('use_static_mask_shape', models.BooleanField(default=False, help_text='Use pre-defined static shapes for product masking (e.g. shallow water areas; set path to STATIC_MASK_SHAPE).')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.UserProject')),
            ],
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_name', models.CharField(max_length=100)),
                ('ews_id', models.IntegerField()),
                ('geodata_model', models.CharField(choices=[('GeoDataLandsat8', 'GeoDataLandsat8'), ('GeoDataSentinel2', 'GeoDataSentinel2'), ('GeoDataSentinel3', 'GeoDataSentinel3')], max_length=50)),
                ('config_model', models.CharField(choices=[('ConfigLandsat8', 'ConfigLandsat8'), ('ConfigSentinel2', 'ConfigSentinel2')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Watertype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ews_id', models.IntegerField()),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ['ews_id'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='configsentinel2',
            unique_together={('project', 'ews_ident', 'config_name')},
        ),
        migrations.AlterUniqueTogether(
            name='configlandsat8',
            unique_together={('project', 'ews_ident', 'config_name')},
        ),
    ]
